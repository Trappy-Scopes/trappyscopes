## -------------------------------------------------------------------------------------##
## Trappy-Scopes default config schema                                                  ##
## -----------------------------------                                                  ##
##                                                                                      ##
##                                                                                      ##
## Some quirks:                                                                         ##
## 1. In case of structured options (e.g. venv, file_server), the "active" keyword      ##
##    causes the whole block to be ignored (no validation).                             ##
## 2. Absense of a field is presumed to have the "active" field as false. Thats the     ##
##    default option for most optional configuration parameters.                        ##
## 3. The default way to specify "kind" is using the python path syntax: <module>.<sub- ##
##    module>.<sub-sub-module>.Object .                                                 ##
## 4. There is a basic support for configurable paths/options using the python f-string ##
##    synatax. For e.g.: `file_server.destination`, if set to "{date}_{scopeid}_{user}" ##
##    will make a directory: "1997_01_01_Mach42_ADent".                                 ##
##                                                                                      ##
##    The following variables are supported:                                            ##
##    1. scopeid: synonymous to the scope-name                                          ##
##    2. date:    with yyyy_MM_dd formatiing                                            ##
##    3. time:    with HH_mm_ss formatting                                              ##
##    4. user:    shorthand user-name that is updated using `user.login("<username>")`. ##
##                                                                                      ##
##                                                                                      ##
## Please note that `PyYAML` and `Confuse`, which are used to parse and maintain config ##
## in this lib do not parse comments, so this text will not be pasted in the actual     ##
## configuration file.                                                                  ##
## -------------------------------------------------------------------------------------##

name: <TrappySomething>            ## Name of the scope (scopeid)
type: generic-scope                ## Type of device -> Selection of the abstraction


## Trappy-Scopes configuration options
config:
  trappydir: ~/trappyverse   # Directory where the configuration of the scope is stored.
  config_files: []           # Append more configuration files
  ui_mode: interactive       # User interaction mode
  venv:                      # Whether to use a virtual environment for 
      active: false          # Config block is active. The function is turned on.
      command: source ~/opt/miniconda3/bin/activate 
      name: trappy                # Name of the virtual environment that will be called after the command
  git_sync:                  # Automatically git-sync certain repositories
    active: false                # Config block is active. The function is turned on.
    command: git pull           # Exact command to use for git syncronisation
    repos: []                   # List of local repositories, where the command will be called
                   
  set_wallpaper: false       # This option will set a "information" panel as the wallpaper. This helps to id the device, incase of multiplexing.
  log_level: 20              # Log level of the root logger. Use 10 for debug. 20 is info and higher.
  config_server:             # Configuration files are synchronised with this server, when changed.         
    active: false
    server: <ip>/<address>
    share: <name-of-server-share>
    destination: "{date}"   # Sub folder inside the share. This will create a folder with the "current date" opon operation.
    username: <username>
    password: <password>
  config_redact_fields:     # Fields that will be redacted, if the config file is copied
    - username
    - password
  startup_recipie: core.startup  # Startup procedure that defines how the CLI environment is created. `core.startup.__init__.py` defines the default one.
  startup_scripts: []            # Scripts to run by default when the CLI is started.   

## Experiment configuration options
Experiment:
  exp_dir: ~/experiments              # Default directory where experiments are stored
  protocols_dir: ~/lab_protocols      # Directory where protocols are stored, This can also be a git-address.
  calibration_dir: ~/calibration_dir  # Directory where calibrations are stored.
  exp_dir_structure:                  # This is the directory structure, that will be created within every experiment.
    - scripts
    - postprocess
    - converted
    - analysis
  exp_report: false                   # Whether the pdf report functionality is turned on or not.
  eid_generator: core.uid.uid         # This is the funtion that will be called to generate experiment IDs. By default is calls `nanoid.generate('1234567890abcdef', 10)`
  file_server:                        # File server for synchronisation of experiments
    active: false
    server: <ip>/<address>
    share: <name-of-server-share>
    destination: "{date}"
    username: <username>
    password: <password>


## The main device assembly is described here
ScopeAssembly:
  <hostname>: 
    description: "Host processorgroup."
    kind: hive.processorgroups.abstractprocessorgroup.ProcessorGroup
    args: []
    kwargs: {}


